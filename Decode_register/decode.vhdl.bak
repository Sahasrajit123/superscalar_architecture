library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity decode is
  port (
	clk: in std_logic;
	inst_1_valid_in: in std_logic;
	inst_2_valid_in: in std_logic;
	Instr1_in: in std_logic_vector(15 downto 0);
	Instr2_in: in std_logic_vector(15 downto 0);
	PC_in: in std_logic_vector(15 downto 0);
	Nxt_PC_in: in std_logic_vector(15 downto 0);
	------------------------------------------------------------
	--Instruction 1
	I1_valid: out std_logic;
	I1_op_code: out std_logic_vector(3 downto 0);
	I1_op_cz: out std_logic_vector(1 downto 0);
	I1_dest_code: out std_logic_vector(2 downto 0);
	I1_operand_1_code: out std_logic_vector(2 downto 0);
	I1_operand_2_code: out std_logic_vector(2 downto 0);
	I1_Imm: out std_logic_vector(15 downto 0);
	I1_PC: out std_logic_vector(15 downto 0);
	I1_Nxt_PC: out std_logic_vector(15 downto 0);

	--Instruction 2
	I2_valid: out std_logic;
	I2_op_code: out std_logic_vector(3 downto 0);
	I2_op_cz: out std_logic_vector(1 downto 0);
	I2_dest_code: out std_logic_vector(2 downto 0);
	I2_operand_1_code: out std_logic_vector(2 downto 0);
	I2_operand_2_code: out std_logic_vector(2 downto 0);
	I2_Imm: out std_logic_vector(15 downto 0);
	I2_PC: out std_logic_vector(15 downto 0);
	I2_Nxt_PC: out std_logic_vector(15 downto 0)
  ) ;
end entity ; -- decode

architecture arch of decode is

begin

Decoder : process(clk,inst_2_valid_in,inst_1_valid_in,Instr2_in,Instr1_in,PC_in,Nxt_PC_in)
	variable I1_valid_var: std_logic;
	variable I1_op_code_var: std_logic_vector(3 downto 0);
	variable I1_op_cz_var: std_logic_vector(1 downto 0);
	variable I1_dest_code_var: std_logic_vector(2 downto 0);
	variable I1_operand_1_code_var: std_logic_vector(2 downto 0);
	variable I1_operand_2_code_var: std_logic_vector(2 downto 0);
	variable I1_Imm_var: std_logic_vector(15 downto 0);
	variable I1_PC_var: std_logic_vector(15 downto 0);
	variable I1_Nxt_PC_var: std_logic_vector(15 downto 0); 

	variable constant_zero: std_logic_vector(15 downto 0) := "0000000000000000";
	variable constant_zero_LHI: std_logic_vector(6 downto 0) := "0000000";

begin
-- IMP: Store will not have destination register so Ra i.e. 11 downto 8 is storing the value to be stored
	if (clk'event and clk = '1') then

		--- Instruction 1
		if (inst_1_valid_in = '1') then
			
			case(Instr1_in(15 downto 12)) is
					
					when "0000" =>
					--ADD/ADC/ADZ
					I1_valid_var := inst_1_valid_in;
					I1_op_code_var := Instr1_in(15 downto 12);
					I1_op_cz_var := Instr1_in(1 downto 0);
					I1_dest_code_var := Instr1_in(11 downto 9);
					I1_operand_1_code_var := Instr1_in(8 downto 6);
					I1_operand_2_code_var := Instr1_in(5 downto 2);
					I1_Imm_var := constant_zero;
					I1_PC_var := PC_in;
					I1_Nxt_PC := std_logic_vector(unsigned(PC_in) + 1);

					when "0010" =>
					-- NDU/NDZ/NDC
					I1_valid_var := inst_1_valid_in;
					I1_op_code_var := Instr1_in(15 downto 12);
					I1_op_cz_var := Instr1_in(1 downto 0);
					I1_dest_code_var := Instr1_in(11 downto 9);
					I1_operand_1_code_var := Instr1_in(8 downto 6);
					I1_operand_2_code_var := Instr1_in(5 downto 2);
					I1_Imm_var := constant_zero;
					I1_PC_var := PC_in;
					I1_Nxt_PC := std_logic_vector(unsigned(PC_in) + 1);

					when "0001" =>
					-- ADI
					I1_valid_var := inst_1_valid_in;
					I1_op_code_var := Instr1_in(15 downto 12);
					I1_op_cz_var := Instr1_in(1 downto 0);
					I1_dest_code_var := Instr1_in(11 downto 9);
					I1_operand_1_code_var := Instr1_in(8 downto 6);
					I1_operand_2_code_var := Instr1_in(5 downto 2);
					I1_Imm_var := Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(4 downto 0) ;
					I1_PC_var := PC_in;
					I1_Nxt_PC := std_logic_vector(unsigned(PC_in) + 1);	
				
					when "0011" =>
					-- LHI
					I1_valid_var := inst_1_valid_in;
					I1_op_code_var := Instr1_in(15 downto 12);
					I1_op_cz_var := Instr1_in(1 downto 0);
					I1_dest_code_var := Instr1_in(11 downto 9);
					I1_operand_1_code_var := Instr1_in(8 downto 6);
					I1_operand_2_code_var := Instr1_in(5 downto 2);
					I1_Imm_var := Instr1_in(8 downto 0) & constant_zero_LHI;
					I1_PC_var := PC_in;
					I1_Nxt_PC := std_logic_vector(unsigned(PC_in) + 1);

					when "0100" =>
					-- LW
					I1_valid_var := inst_1_valid_in;
					I1_op_code_var := Instr1_in(15 downto 12);
					I1_op_cz_var := Instr1_in(1 downto 0);
					I1_dest_code_var := Instr1_in(11 downto 9);
					I1_operand_1_code_var := Instr1_in(8 downto 6);
					I1_operand_2_code_var := Instr1_in(5 downto 2);
					I1_Imm_var := Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(4 downto 0);
					I1_PC_var := PC_in;
					I1_Nxt_PC := std_logic_vector(unsigned(PC_in) + 1);

					when "0101" =>
					-- SW

					I1_valid_var := inst_1_valid_in;
					I1_op_code_var := Instr1_in(15 downto 12);
					I1_op_cz_var := Instr1_in(1 downto 0);
					I1_dest_code_var := Instr1_in(11 downto 9);
					I1_operand_1_code_var := Instr1_in(8 downto 6);
					I1_operand_2_code_var := Instr1_in(5 downto 2);
					I1_Imm_var := Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(4 downto 0);
					I1_PC_var := PC_in;
					I1_Nxt_PC := std_logic_vector(unsigned(PC_in) + 1);

					when "1100" =>
					-- BEQ
					I1_valid_var := inst_1_valid_in;
					I1_op_code_var := Instr1_in(15 downto 12);
					I1_op_cz_var := Instr1_in(1 downto 0);
					I1_dest_code_var := Instr1_in(11 downto 9);
					I1_operand_1_code_var := Instr1_in(11 downto 9);
					I1_operand_2_code_var := Instr1_in(8 downto 6);
					I1_Imm_var := Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(5) & Instr1_in(4 downto 0);
					I1_PC_var := PC_in;
					I1_Nxt_PC := std_logic_vector(unsigned(PC_in) + 1);	
					
					when "1000" =>
					-- JAL
					I1_valid_var := inst_1_valid_in;
					I1_op_code_var := Instr1_in(15 downto 12);
					I1_op_cz_var := Instr1_in(1 downto 0);
					I1_dest_code_var := Instr1_in(11 downto 9);
					I1_operand_1_code_var := Instr1_in(8 downto 6);
					I1_operand_2_code_var := Instr1_in(5 downto 2);
					I1_Imm_var := Instr1_in(8 downto 0) & constant_zero_LHI;
					I1_PC_var := PC_in;
					I1_Nxt_PC := std_logic_vector(unsigned(PC_in) + 1);

					when "1001" =>
					-- JLR
					I1_valid_var := inst_1_valid_in;
					I1_op_code_var := Instr1_in(15 downto 12);
					I1_op_cz_var := Instr1_in(1 downto 0);
					I1_dest_code_var := Instr1_in(11 downto 9);
					I1_operand_1_code_var := Instr1_in(8 downto 6);
					I1_operand_2_code_var := Instr1_in(5 downto 2);
					I1_Imm_var := constant_zero;
					I1_PC_var := PC_in;
					I1_Nxt_PC := std_logic_vector(unsigned(PC_in) + 1);

					when others =>

					I1_valid_var := inst_1_valid_in;
					I1_op_code_var := Instr1_in(15 downto 12);
					I1_op_cz_var := Instr1_in(1 downto 0);
					I1_dest_code_var := Instr1_in(11 downto 9);
					I1_operand_1_code_var := Instr1_in(8 downto 6);
					I1_operand_2_code_var := Instr1_in(5 downto 2);
					I1_Imm_var := constant_zero;
					I1_PC_var := PC_in;
					I1_Nxt_PC := std_logic_vector(unsigned(PC_in) + 1);
				
				end case ;	
		
		else
			I1_valid_var := inst_1_valid_in;
			I1_op_code_var := Instr1_in(15 downto 12);
			I1_op_cz_var := Instr1_in(1 downto 0);
			I1_dest_code_var := Instr1_in(11 downto 9);
			I1_operand_1_code_var := Instr1_in(8 downto 6);
			I1_operand_2_code_var := Instr1_in(5 downto 2);
			I1_Imm_var := constant_zero;
			I1_PC_var := PC_in;
			I1_Nxt_PC := std_logic_vector(unsigned(PC_in) + 1);
		end if ;

		if (inst_2_valid_in = '1') then
			
			case(Instr2_in(15 downto 12)) is
					
					when "0000" =>
					--ADD/ADC/ADZ
					I2_valid_var := inst_2_valid_in;
					I2_op_code_var := Instr2_in(15 downto 12);
					I2_op_cz_var := Instr2_in(1 downto 0);
					I2_dest_code_var := Instr2_in(11 downto 9);
					I2_operand_1_code_var := Instr2_in(8 downto 6);
					I2_operand_2_code_var := Instr2_in(5 downto 2);
					I2_Imm_var := constant_zero;
					I2_PC_var := std_logic_vector(unsigned(PC_in) + 1);
					I2_Nxt_PC := Nxt_PC_in;

					when "0010" =>
					-- NDU/NDZ/NDC
					I2_valid_var := inst_2_valid_in;
					I2_op_code_var := Instr2_in(15 downto 12);
					I2_op_cz_var := Instr2_in(1 downto 0);
					I2_dest_code_var := Instr2_in(11 downto 9);
					I2_operand_1_code_var := Instr2_in(8 downto 6);
					I2_operand_2_code_var := Instr2_in(5 downto 2);
					I2_Imm_var := constant_zero;
					I2_PC_var := std_logic_vector(unsigned(PC_in) + 1);
					I2_Nxt_PC := Nxt_PC_in;

					when "0001" =>
					-- ADI
					I2_valid_var := inst_2_valid_in;
					I2_op_code_var := Instr2_in(15 downto 12);
					I2_op_cz_var := Instr2_in(1 downto 0);
					I2_dest_code_var := Instr2_in(11 downto 9);
					I2_operand_1_code_var := Instr2_in(8 downto 6);
					I2_operand_2_code_var := Instr2_in(5 downto 2);
					I2_Imm_var := Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(4 downto 0) ;
					I2_PC_var := std_logic_vector(unsigned(PC_in) + 1);
					I2_Nxt_PC := Nxt_PC_in;

					when "0011" =>
					-- LHI
					I2_valid_var := inst_2_valid_in;
					I2_op_code_var := Instr2_in(15 downto 12);
					I2_op_cz_var := Instr2_in(1 downto 0);
					I2_dest_code_var := Instr2_in(11 downto 9);
					I2_operand_1_code_var := Instr2_in(8 downto 6);
					I2_operand_2_code_var := Instr2_in(5 downto 2);
					I2_Imm_var := Instr2_in(8 downto 0) & constant_zero_LHI;
					I2_PC_var := std_logic_vector(unsigned(PC_in) + 1);
					I2_Nxt_PC := Nxt_PC_in;

					when "0100" =>
					-- LW
					I2_valid_var := inst_2_valid_in;
					I2_op_code_var := Instr2_in(15 downto 12);
					I2_op_cz_var := Instr2_in(1 downto 0);
					I2_dest_code_var := Instr2_in(11 downto 9);
					I2_operand_1_code_var := Instr2_in(8 downto 6);
					I2_operand_2_code_var := Instr2_in(5 downto 2);
					I2_Imm_var := Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(4 downto 0) ;
					I2_PC_var := std_logic_vector(unsigned(PC_in) + 1);
					I2_Nxt_PC := Nxt_PC_in;

					when "0101" =>
					-- SW
					I2_valid_var := inst_2_valid_in;
					I2_op_code_var := Instr2_in(15 downto 12);
					I2_op_cz_var := Instr2_in(1 downto 0);
					I2_dest_code_var := Instr2_in(11 downto 9);
					I2_operand_1_code_var := Instr2_in(8 downto 6);
					I2_operand_2_code_var := Instr2_in(5 downto 2);
					I2_Imm_var := Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(4 downto 0) ;
					I2_PC_var := std_logic_vector(unsigned(PC_in) + 1);
					I2_Nxt_PC := Nxt_PC_in;

					when "1100" =>
					-- BEQ
					I2_valid_var := inst_2_valid_in;
					I2_op_code_var := Instr2_in(15 downto 12);
					I2_op_cz_var := Instr2_in(1 downto 0);
					I2_dest_code_var := Instr2_in(11 downto 9);
					I2_operand_1_code_var := Instr2_in(11 downto 9);
					I2_operand_2_code_var := Instr2_in(8 downto 6);
					I2_Imm_var := Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(5) & Instr2_in(4 downto 0) ;
					I2_PC_var := std_logic_vector(unsigned(PC_in) + 1);
					I2_Nxt_PC := Nxt_PC_in;

					when "1000" =>
					-- JAL
					I2_valid_var := inst_2_valid_in;
					I2_op_code_var := Instr2_in(15 downto 12);
					I2_op_cz_var := Instr2_in(1 downto 0);
					I2_dest_code_var := Instr2_in(11 downto 9);
					I2_operand_1_code_var := Instr2_in(8 downto 6);
					I2_operand_2_code_var := Instr2_in(5 downto 2);
					I2_Imm_var := Instr2_in(8 downto 0) & constant_zero_LHI;
					I2_PC_var := std_logic_vector(unsigned(PC_in) + 1);
					I2_Nxt_PC := Nxt_PC_in;

					when "1001" =>
					-- JLR
					I2_valid_var := inst_2_valid_in;
					I2_op_code_var := Instr2_in(15 downto 12);
					I2_op_cz_var := Instr2_in(1 downto 0);
					I2_dest_code_var := Instr2_in(11 downto 9);
					I2_operand_1_code_var := Instr2_in(8 downto 6);
					I2_operand_2_code_var := Instr2_in(5 downto 2);
					I2_Imm_var := constant_zero;
					I2_PC_var := std_logic_vector(unsigned(PC_in) + 1);
					I2_Nxt_PC := Nxt_PC_in;

					when others =>

					I2_valid_var := inst_2_valid_in;
					I2_op_code_var := Instr2_in(15 downto 12);
					I2_op_cz_var := Instr2_in(1 downto 0);
					I2_dest_code_var := Instr2_in(11 downto 9);
					I2_operand_1_code_var := Instr2_in(8 downto 6);
					I2_operand_2_code_var := Instr2_in(5 downto 2);
					I2_Imm_var := constant_zero;
					I2_PC_var := std_logic_vector(unsigned(PC_in) + 1);
					I2_Nxt_PC := Nxt_PC_in;

				end case ;	

		else
			I2_valid_var := inst_2_valid_in;
			I2_op_code_var := Instr2_in(15 downto 12);
			I2_op_cz_var := Instr2_in(1 downto 0);
			I2_dest_code_var := Instr2_in(11 downto 9);
			I2_operand_1_code_var := Instr2_in(8 downto 6);
			I2_operand_2_code_var := Instr2_in(5 downto 2);
			I2_Imm_var := constant_zero;
			I2_PC_var := std_logic_vector(unsigned(PC_in) + 1);
			I2_Nxt_PC := Nxt_PC_in;
		end if ;

		I1_valid <= I1_valid_var;
		I1_op_code <= I1_op_code_var;
		I1_op_cz <= I1_op_cz_var;
		I1_dest_code <= I1_dest_code_var;
		I1_operand_1_code <= I1_operand_1_code_var;
		I1_operand_2_code <= I1_operand_2_code_var;
		I1_Imm <= I1_Imm_var;
		I1_PC <= I1_PC_var;
		I1_Nxt <= I1_Nxt_PC;

		I2_valid <= I2_valid_var;
		I2_op_code <= I2_op_code_var;
		I2_op_cz <= I2_op_cz_var;
		I2_dest_code <= I2_dest_code_var;
		I2_operand_1_code <= I2_operand_1_code_var;
		I2_operand_2_code <= I2_operand_2_code_var;
		I2_Imm <= I2_Imm_var;
		I2_PC <= I2_PC_var;
		I2_Nxt <= I2_Nxt_PC;

	end if ;
	
end process ; -- Decoder


end architecture ; -- arch